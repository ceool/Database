nvl(comm, 0)으로 null 없앰



--------------------------------------------
기본 쿼리문 및 select문
--------------------------------------------
5강
SQL 명령문
관계형 데이터 베이스 관리 시스템 관리 프로그래밍 언어
표준언어는 모두 지원, 비표준은 특정 RDBMS에서만 지원

DDL
Data Definition Language (데이터 정의어)
- 테이블과 인덱스 구조를 관리하는 언어 (create,drop, alter 등)

DML
Data Manipulation Language (데이터 조작어)
 - 테이블 등에 데이터를 저장, 수정, 삭제, 추출 등을  처리하는 언어 (insert, update, delete, select 등)

DCL
Data Control Language (데이터 제어어)
 - 사용자 권한, 작업의 취소 등을 처리할 수 있는 언어 (grant, revoke, commit, rollback 등)




6강
DML - select
 - 데이터베이스에 저장된 데이터를 가져오는 명령문




7강 DML - 연산자 사용
+, -, *, /
null은 값이 없다
연산, 정렬에서 null은 무한대

concat 연산자
 - 문자열을 합치는 연산자



8강
SQL 문은 테이블 내의 모든 로우에 대해 적용을 하게 됨
조건절로 골라 쓸 수 있음 (where)
- select 컬럼명 from from 테이블명 where 조건절

< 작은가
> 큰가
<= 작거나 같은가
>= 크거나 같은가
= 같은가
<>, !=, ^= 다른가



9강
논리 연산자
 - 여러 조건식 묶어 하나 조건식으로 만들 수 있음

and
or
not 조건식 결과 부정
between and 범위 조건
in 항목 조건

hiredate >= '1981/01/01' and hiredate <= '1981/12/31'
hiredate BETWEEN  '1981/01/01' and  '1981/12/31'
(2개 같음)



10강
like 연산자
조건문에서 문자열 컴러 = <> 비교 가능
만약 문자열 컬럼에 저장되어 있는 값이 특정 문자열 포함하고 있는지 파악하려면 like 연산자 사용

select 컬럼명 from 테이블명 where 컬럼명 like 와일드카드
 _  : 글자 하나 의미
 % : 글자 0개 이상을 의미



11강
null 비교
- null은 정해져 있는 값 혹은 무한대 의미를 갖는 값

이 때문에 = <> 통해 컬럼 값이 null인지 연산 안됨

is null, is not null을 통해 null 비교




12강
정렬
 - select 문을 통해 얻어온 결과를 특정 컬럼 기준으로 오름차순 혹은 내림차순 정렬
 - 숫자 문자열 날짜 등 모든 타입 데이터 정렬할 수 있음

select 컬럼명
from 테이블명
where 조건
order by 컬럼명 [ASC|DESC]
ASC: 오름차순, 생략가능
DESC: 내림차순




13장
숫자 함수
 - 컬럼에 저장되어 있는 숫자 값에 대해 처리를 하여 값을 가져올 수 있는 함수들

numeric 확인
https://docs.oracle.com/cd/B19306_01/server.102/b14200/functions001.htm




14강
문자열
 - 컬럼에 저장되어 있는 문자열에 대해 처리를 하여 값을 가져올 수 있는 함수들




15강
날짜 함수
 - 날짜를 제어하는 함수

sysdate: 현재 날짜와 시간을 제어
moths_between: 두 날짜간의 개월 수 를 구함
add_months: 주어진 개월 수 만큼 더한다
next_day: 돌아오는 지정된 요일의 날짜 반환
last_day: 지정된 달에 마지막 날을 반환
round: 지정된 기준으로 반올림
trunc: 지정된 기준으로 버림



16강
DECODE, CASE

DECODE
 - 값에 따라 반환값이 결정되는 구문
decode(컬럼명,	값1, 반환값1,
		값2, 반환값2,
		값3, 반환값3)


CASE
- 조건에 따라 반환값이 결정되는 구문
case when 조건식1 then 반환값1
      when 조건식2 then 반환값2
end






17강 그룹함수
select 문을 통해 가져올 결과를 그룹으로 묶고 그룹 내에서 지정된 컬럼의 총합, 평균 등을 구할 수 있는 함수

sum
avg
count
max
min






18강 Group by
 - 그룹 함수를 사용할 경우 select ~ from ~ where 절까지 모두 수행하여 가져온 결과를 하나의 그룹으로 묶어 총합, 평균 등을 구할 수 있다.
 - 그룹 함수를 사용하면 select문을 수행하여 가져온 하나의 결과를 여러 그룹으로 나눠 그룹 가각의 총합 평균 등을 구할 수 있다.

 select 컬럼명
 from 테이블명
 where 조건절
 group by 그룹기준
 order by 정렬기준



19강
Having
 - Group by로 묶인 각 그룹들 중에 실제 가져올 그룹을 선택한 조건을 having 절에 작성
 - Having은 group by 절의 조건이 됨





20강
조인
 - 두 개 이상의 테이블에 있는 컬럼의 값을 한번에 가져오기 위해 사용하는 것

(두 개 이상 테이블에서 가져온 결과 중에 정확한 결과만 가져오기 위해 반드시
공통 부부분을 이용한 조건문이 반드시 필요







21강
Self join, Outer join

Self join : 같은 테이블을 두 번 이상 조인하는 것을 의미
Outer join : 조인 조건에 해당하지 않기 때문에 결과에 포함되지 않는 로우까지 가져오는 조인




22강
서브쿼리
- 쿼리문 안에 들어가는 쿼리문을 서브쿼리라 함

쿼리문 작성시 사용되는 값을 다른 쿼리문을 통해 구해야 할경우 사용






23강
결과가 하나 이상인 서브쿼리
 - 서브쿼리를 통해 가져온 결과가 하나 이상인 경우 결과를 모두 만족하거나 
   결과중 하나만 만족하거나 해야하는 경우가 있음

연산자
IN: 서브쿼리 결과중 하나라도 일치하면 조건은 참
ANY, SOME: 서브쿼리 결과와 하나 이상 일치하면 참
ALL : 서브쿼리 결과 모두 일치 해야 참


24강
SET
 - 두 select문을 통해 얻어온 결과에 대해 집합 연산을 할 수 있는 명령문이다.
 - 두 select문을 통해 가져온 컬럼의 형태가 완전히 일치해야 한다.

UNION : 합집함
UNION : 합집합, 중복된 데이터 모두 가져옴
INTERSECT : 교집함
MINUS : 차집함





--------------------------------------------
insert, update, delete
--------------------------------------------
25강
Insert
 - 테이블에 새로운 로우를 추가하는 구문
insert into 테이블명(컬럼명..)
values(값...)

- 서브쿼리로 데이터 저장
insert into 테이블명
서브쿼리

insert all
into 테이블명(컬럼명) values(컬럼명)
into 테이블명(컬럼명) values(컬럼명)
서브쿼리




26강
update
 - 로우 내의 컬럼 값을 수정하는 구문이다.

update 테이블명
set 컬럼=값, 컬럼=값...
where 조건문




27강 delete
 - 테이블 내의 로우를 삭제하는 구문이다.
delete from 테이블명 
where 조건문





--------------------------------------------
테이블 만들기(table)
--------------------------------------------
28강 테이블 만들기
create table 테이블명 (
	컬럼명 자료형 제약조건,
	컬럼명 자료형 제약조건
}

create table emp02
as
select ...

char(size) : 고정 길이 문자열 타입
varchar2(size) : 가변 길이 문자열 타입
number : 최고 40자리까지 저장할 수 있는 숫자타입
date : 날짜
long : 가변 길이 문자열 타입, 최대 2Gbyte





29강 제약조건
- 테이블 데이터를 저장 혹은 수정할 떄 컴럼의 값에 대한 조건을 설정하는 것
- 설정된 조건에 위배되는 값을 컬럼에 저장할 수 없으며 데이터의 무결성을 위한 구문

not null : 컬럼에 null을 허용하지 않음
unique : 중복된 값을 허용하지 않음, 단 null은 무한대로 저장할 수 있음
primary key : 중복된 값을 허용하지 않으며 null 값을 허용하지 않음. 각 로우를 구분하기 위한 유일한 값을 저장하기 위해 사용
foreign key : 다른 테이블 혹은 같은 테이블의 컬럼을 참조하는 제약 조건. 참조하는 컬럼에 저장되어 있는 값만 컬럼에 저장할 수 있음. 일반적으로 primary key 제약조건이 설정된 컬럼을 참조함
check : 조건에 만족할 경우 칼럼에 저장할 수 있도록 함.




30강 테이블 레벨 제약 조건
 - 제약 조건을 설정할 때 각 컬럼마다 지정할 수 있지만 하단부분에 몰아서 지정가능
 - 컬럼 명 앞에 기술하는 것을 컬럼 레벨, 하단에 몰아서 기술하는 것을 테이블 레벨 제약조건이라고 부름

복합키
 - 테이블 레벨 제약조건을 설정할 때 하나 이상의 컬럼의 하나의 primary key로 묶어서 사용 가능
 - 복합키의 경우 각 컬럼에 중복된 데이터가 허용이 되지만 한 로우의 모든 복합키 컬럼이 중복되는 것은 허용하지 않는다




31강
제약조건 추가하기
 - 테이블을 생성한 후 제약 조건을 추가하거나 제거하고 싶다면 alter 구문을 이용한다
ex)
alter table 테이블명
add 제약조건

alter table 테이블명
drop 제약조건


제약조건 활성/비활성화
 - diable을 사용하면 제약 조건이 비활성화되고, enable을 사용하면 제약조건이 활성화 된다.
-- 주의점: 제약조건을 활성화할 때, 제약조건에 위배되면 활성화 되지않음.
ex)
alter table 테이블명
enble 제약조건

alter table 테이블명
disable 제약조건





32강 테이블 구조 변경하기
 - alter 구문을 이용하면 테이블 구조를 변경할 수 있다.

--추가(add), 수정(modify), 테이블이름변경(rename to), 컬럼 이름변경(rename column)
--컬럼삭제(drop colum), 테이블삭제(drop table)

ex)
-- alter table 테이블명
-- add (컬럼명 자료형 제약조건)

-- alter table 테이블명
-- modify (컬럼명 자료형 제약조건)

-- alter table 테이블명
-- rename to 테이블명

-- alter table 테이블명
-- rename column 컬럼명1 컬럼명2

-- alter table 테이블명
-- drop column 컬럼명

-- drop table 테이블명







--------------------------------------------
트랜잭션 관리 및 인덱스
--------------------------------------------
33강
트랜잭션
 - 트랜잭션이란 최종 결과를 내기까지 위한 하나의 작업 단위
 - 오라클 데이터베이스는 개발자가 전달한 insert, update, delete문을 메모리상에서만 수행하고 디스크에 반영x
 - 이는 실수로 인한 데이터의 유실을 막기 위함히다.


-- commit : 트랜잭션을 완료하고 디스크에 반영한다. 복구불가.
-- rollback : 트랜잭션을 취소한다.
-- savepoint : rollback의 단위를 지정한다.






34강
시퀀스
-- 테이블 내의 컬럼중 primary key 지정하기 애매한 경우 1부터 1씩 증가되는 값을 저장하는 컬럼을 추가하여 사용하는 경우가 있음.
-- 이때, 1부터 1씩 증가되는 값을 구하기 위해 시퀀스를 사용

-- start with 숫자 : 시작 값, 절대 최소값보다 작을 수 없음
-- increment by : 증가 값
-- max value : 시퀀스가 가질 수 있는 최대 값, 생략하거나 nomaxvalue 일 경우, 10^27
-- min value : 시퀀스가 가질 수 있는 최소 값, 생략하거나 nominvalue일 경우 1
-- cycle : 최대 혹은 최소값까지 갈경우 순환한다.






35강 인덱스
 - 데이터베이스에서 검색속도를 빠르게 하기 위해서 사용

장점
-- 검색속도가 빨라진다
-- 시스템의 부하를 줄여 성능 향상시킨다

단점
-- 추가적인 기억공간이 필요
-- 인덱스 생성 시간이 오래걸린다
-- insert, update, delete와 같은 변경 작업이 자주 일어나면 오히려 성능 저하를 가져올 수 있다.






36강
뷰
 - 뷰는 데이터베이스에서 제공하는 가상의 테이블을 의미
 - 뷰를 사용하면 복잡한 쿼리문을 대신할 수 있기 때문에 개발의 용이성을 가질 수 있음.
 - 뷰는 뷰를 만들 때 사용한 쿼리문을 저장하는 것이며 뷰를 조회할 때 뷰를 만들 때 사용한 쿼리문이 동작하게 된다.

뷰 생성 권한 설정
 - 일반 계정의 경우 뷰를 생성할 수 있는 권한이 없기 때문에 뷰 생성 권한을 설정해줘야 한다.
ex)
grant create view to 계정이름

뷰 샐성하기
create view 뷰이름
as
서브쿼리




37강
테이블 스페이스
 - 오라클에서 여러 테이블들을 하나의 그룹으로 묶어서 관리하는 개념을 의미한다.

테이블 스페이스 만들기
 - system 계정으로 DBA에 접속한다.
 - 저장 영역에 새로운 테이블 스페이스를 만든다.
 - 테이블 스페이스에 접속할 수 있는 계정을 만들고 테이블 스페이스와 연결시켜준다.

DBA에 접속하기
 - sql developer - 보기 > DBA 클릭
 - system 계정으로 접속
 - DBA - system에서 저장영역을 펼치고 테이블 스페이스를 클릭한다.
 - 작업에 새로 만들기 클릭


계정 만들기
 - 보안을 펼쳐주고 사용자를 클릭한다.
 - 작업에 새로 만들기를 클릭한다.
사용자 이름: 접속할 계정이름
비밀번호: 접속 비밀번호
기본 테이블 스페이스: 계정 접속시 사용할 테이블 스페이스 (방금 만든 것)
임시 테이블 스페이스 : 임시로 사용할 테이블 스페이스

부여된 롤 누르고
 - CONNECT : 권한이 부여됨, 기본값 클릭
 - RESOURCE : 권한이 부여됨, 기본값 클릭




38강
JDBC
 - Java 프로그램과 데이터베이스를 연결하여 데이터를 관리할 수 있도록 하는 기술
 - JDBC를 사용하기 위해서는 JDBC 드라이버가 필요한데, JDBC 드라이버는 데이터베이스 제작사가 제공하고 있다.
-- D:\app\사용자이름\product\11.2.0\dbhome_1\jdbc\lib\ojdbc6.jar

순서
JDBC 드라이버 설정 - JDBC 드라이버 로딩 - 데이터베이스 접속 - 쿼리문 전달 - 결과 처리